import os  # Импортируем модуль для работы с файловой системой
from PyQt5.QtWidgets import (
   QApplication, QWidget,  # Импортируем основные виджеты для создания приложения
   QFileDialog,  # Диалоговое окно для выбора файлов и папок
   QLabel, QPushButton, QListWidget,  # Виджеты: метка, кнопки и список файлов
   QHBoxLayout, QVBoxLayout)  # Менеджеры компоновки для горизонтального и вертикального размещения

# Инициализация приложения
app = QApplication([])  # Создаем объект приложения PyQt
win = QWidget()  # Создаем главное окно приложения
win.resize(700, 500)  # Устанавливаем размер окна (700 пикселей по ширине, 500 — по высоте)
win.setWindowTitle('Easy Editor')  # Устанавливаем заголовок окна

# Создание элементов интерфейса
lb_image = QLabel("Картинка")  # Создаем метку для отображения изображения
btn_dir = QPushButton("Папка")  # Кнопка для выбора директории
lw_files = QListWidget()  # Список для отображения файлов в выбранной папке

# Кнопки для обработки изображений
btn_left = QPushButton("Лево")  # Кнопка для поворота изображения влево
btn_right = QPushButton("Право")  # Кнопка для поворота изображения вправо
btn_flip = QPushButton("Зеркало")  # Кнопка для зеркального отображения изображения
btn_sharp = QPushButton("Резкость")  # Кнопка для изменения резкости изображения
btn_bw = QPushButton("Ч/Б")  # Кнопка для преобразования изображения в черно-белое

# Компоновка элементов
row = QHBoxLayout()  # Основная горизонтальная компоновка
col1 = QVBoxLayout()  # Первый вертикальный столбец
col2 = QVBoxLayout()  # Второй вертикальный столбец

# Добавляем виджеты в первый столбец
col1.addWidget(btn_dir)  # В первый столбец добавляем кнопку для выбора директории
col1.addWidget(lw_files)  # В первый столбец добавляем список файлов

# Добавляем виджет для изображения во второй столбец
col2.addWidget(lb_image, 95)  # В второй столбец добавляем метку для изображения, устанавливая вес 95%

# Компоновка кнопок управления изображением
row_tools = QHBoxLayout()  # Горизонтальная компоновка для кнопок инструментов
row_tools.addWidget(btn_left)  # Добавляем кнопку поворота влево
row_tools.addWidget(btn_right)  # Добавляем кнопку поворота вправо
row_tools.addWidget(btn_flip)  # Добавляем кнопку для зеркального отображения
row_tools.addWidget(btn_sharp)  # Добавляем кнопку для изменения резкости
row_tools.addWidget(btn_bw)  # Добавляем кнопку для изменения цветности

# Добавляем строку кнопок во второй столбец
col2.addLayout(row_tools)  # Добавляем горизонтальную строку с кнопками в второй столбец

# Добавляем столбцы в основную строку
row.addLayout(col1, 20)  # Добавляем первый столбец в основную горизонтальную строку с весом 20%
row.addLayout(col2, 80)  # Добавляем второй столбец в основную строку с весом 80%

# Устанавливаем компоновку для главного окна
win.setLayout(row)  # Устанавливаем скомпилированную компоновку для главного окна

win.show()  # Показываем окно приложения

# Переменная для хранения пути к рабочей директории
workdir = ''

# Функция для фильтрации файлов по расширениям
def filter(files, extensions):
   result = []  # Список для хранения отфильтрованных файлов
   for filename in files:  # Перебираем все файлы в переданном списке
       for ext in extensions:  # Для каждого расширения в списке поддерживаемых расширений
           if filename.endswith(ext):  # Если имя файла заканчивается на одно из расширений
               result.append(filename)  # Добавляем файл в результат
   return result  # Возвращаем отфильтрованный список файлов

# Функция для выбора рабочей директории через диалог
def chooseWorkdir():
   global workdir  # Объявляем переменную workdir глобальной
   workdir = QFileDialog.getExistingDirectory()  # Открываем диалог для выбора директории

# Функция для отображения списка файлов в выбранной директории
def showFilenamesList():
   extensions = ['.jpg','.jpeg', '.png', '.gif', '.bmp']  # Список поддерживаемых расширений изображений
   chooseWorkdir()  # Вызываем функцию выбора рабочей директории
   filenames = filter(os.listdir(workdir), extensions)  # Получаем список файлов в директории, фильтруя по расширениям

   lw_files.clear()  # Очищаем список файлов в интерфейсе
   for filename in filenames:  # Перебираем отфильтрованные файлы
       lw_files.addItem(filename)  # Добавляем каждый файл в список

# Подключаем кнопку "Папка" к функции отображения списка файлов
btn_dir.clicked.connect(showFilenamesList)

# Запуск главного цикла приложения
app.exec()  # Запускаем цикл событий приложения, который будет работать до его завершения